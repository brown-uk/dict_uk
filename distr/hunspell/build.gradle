apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'

String outDir = "build/hunspell"
version=new File("${projectDir}/../../VERSION").text.trim()

println "Version: $version"

repositories {
    mavenCentral()
}


dependencies {
    implementation group: 'org.apache.groovy', name: 'groovy', version: '4.0.+'
    implementation group: 'org.apache.groovy', name: 'groovy-cli-picocli', version: '4.0.+'
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.+'
}


sourceSets {
  main {
    java {
        srcDir '../../src/main/java'
    }
    groovy {
        srcDir 'src/main/groovy'
        srcDir '../../src/main/groovy'
    }
    resources {
        srcDir '../../src/main/resources'
        srcDir 'src/main/resources'
    }
  }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.WARN
}


task hunspell (type: JavaExec, dependsOn: classes) {
    outputs.files "$outDir/uk_UA.aff", "$outDir/uk_UA.dic"

    doFirst {
        new File(outDir).mkdirs()
    }

    classpath = sourceSets.main.runtimeClasspath
    mainClass = "Hunspell"
}

task hunspellZip (type: Zip, dependsOn: hunspell) {
   from "$outDir"
   include 'uk_UA.aff'
   include 'uk_UA.dic'
   archiveFileName = "hunspell-uk_UA_${project.version}.zip"
   destinationDirectory = file("$outDir")
}

task hunspellFull (type: JavaExec, dependsOn: classes) {
    outputs.files "$outDir/uk_UA.aff", "$outDir/uk_UA.dic"

    doFirst {
        new File(outDir).mkdirs()
    }

    classpath = sourceSets.main.runtimeClasspath
    mainClass = "Hunspell"
    args "-forSearch"
}


task testHunspellGood(type: Exec) { //, dependsOn: hunspell) {
    def txt = "головатого білого білолицьому ницого"
    txt += " швидко вже"
    txt += " хата хатами дами вимені воріт Карпат кайданів вовчища селом сіл агрошкіл автовізка"
    txt += " карбованця авантюрнице авантюрницею"
    txt += " абонував абортує гуляв хропу сядете живемо абонуватиму жнеш вечоріло"
    txt += " абонувавши абонуючи хроплячи"
    txt += " заправлено казано вимито метено введено"
    txt += " обікрав вжену уженіться"
    txt += " Абакумовича Абакумівни Абакума"
    txt += " Білгород-Дністровського Захер-Мазоха Захера-Мазоха"
    txt += " відіб\\'ю"
    txt += " всього усього"
    txt += " більш найменш перш" //  якнайскоріш
    txt += " кури курей гуси гусей"

    def cmd = "echo $txt | hunspell -d $outDir/uk_UA | grep -E '^&'" + '; [ $? == 1 ]'
    commandLine "sh", "-c", "${cmd}"
}

task testHunspellBad (type: Exec) { //, dependsOn: hunspell) {
    def txt = " кккк білолицого пілі відб\\'ю бльо хер"
    txt += " увсього визначіть вимажіть  підем"
    txt += " ніштяк гарная пірвати стріляючий февдалізм"
    // txt += " сміючися певніш"

    def cmd = "echo $txt | hunspell -d $outDir/uk_UA | grep -E '^(\\+|\\*)'" + '; [ $? == 1 ]'
    commandLine "sh", "-c", "${cmd}"
}

task testHunspell(dependsOn: [testHunspellGood, testHunspellBad]) {
}

task testHunspellFull(type: Exec) { //, dependsOn: hunspell) {
    def txt = "добрії алярм головуючий абонуєм розженем всії даючися"
    txt += " раніш гірш"

    def cmd = "echo $txt | hunspell -d $outDir/_full/uk_UA | grep -E '^&'" + '; [ $? == 1 ]'
    commandLine "sh", "-c", "${cmd}"
}


task getSpellWords (type: Exec) {
    inputs.files "${projectDir}/../../out/dict_corp_lt.txt"
    outputs.files "${projectDir}/build/words_spell.txt"

    def cmd = "grep -vE \"noun:inanim:.:v_kly|(:inf|:3).*:short|:2:long|advp.*long|adv.*:short|adj.*:long|:(bad|subst|alt|arch|slang|vulg|obsc|rare)|[.'] \""
    cmd += " ${projectDir}/../../out/dict_corp_lt.txt | cut -d ' ' -f 1 | sort -u > ${projectDir}/build/words_spell.txt"

    commandLine "sh", "-c", "${cmd}"
}


task testHunspellDirect (type: Exec) {
    dependsOn 'getSpellWords', "hunspell"
    def cmd = "hunspell -d $outDir/uk_UA -l ${projectDir}/build/words_spell.txt | grep -vE \"^'\" > hunspell.unknown.txt; wc -l hunspell.unknown.txt"

    commandLine "sh", "-c", "${cmd}"
}
