apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'

version = '3.3-SNAPSHOT'
group = 'org.languagetool'

String ltVersion = '3.3-SNAPSHOT'

String langCode="uk"

String packageDir="org/languagetool/resource/" + langCode
String resourceDir=sourceSets.main.resources.srcDirs[0].toString() + "/" + packageDir
String outputDir=sourceSets.main.output.resourcesDir.toString() + "/" + packageDir
String tmpDir="build/tmp"

String inputDir="../../out"
String inputDictFile="dict_corp_lt.txt"

String dstEncoding="cp1251"
String srcEncoding="utf-8"



repositories {
    mavenLocal()
    mavenCentral()
}

configurations{
  provided {
        description = 'Configuration for generating the dictionaries'
  }
}

dependencies {
    provided 'org.languagetool:languagetool-tools:' + ltVersion
}


task createTagList(type: Exec, dependsOn: processResources) {
    def srcDict="${inputDir}/$inputDictFile"
    def outFile="${outputDir}/ukrainian_tags.txt"

    inputs.file srcDict
    outputs.file outFile

    workingDir "$projectDir"

    def cmd = "cat ${srcDict} | awk '{ print \$3 }' | grep -v 'verb.*:inf.*:coll' | sort -u > ${outFile}"

    commandLine "sh", "-c", "${cmd}"
}

task prepareDict(type: Exec, dependsOn: processResources) {
    def srcDict="${inputDir}/$inputDictFile"
    def outFile="${tmpDir}/all.tagged.tmp"

    inputs.file srcDict
    outputs.file outFile

    workingDir "$projectDir"

    doFirst {
        println "Preparing dict file $inputDictFile"
        new File("$workingDir/$tmpDir").mkdirs()
    }

    def cmd = "cat ${srcDict} | iconv -f ${srcEncoding} -t ${dstEncoding} | tr ' ' '\\t' | LC_ALL=POSIX sort -u > ${outFile}"

    commandLine "sh", "-c", "${cmd}"
}

task createPOSDict(type: JavaExec, dependsOn: prepareDict) {
    def outputDict="${outputDir}/ukrainian.dict"

    inputs.file tasks.prepareDict.outputs.files
    outputs.file outputDict

    workingDir "$projectDir"

    classpath = files(configurations.provided.files)
    main = 'org.languagetool.tools.POSDictionaryBuilder'

    args "-i", "${tmpDir}/all.tagged.tmp"
    args "-info", "${resourceDir}/ukrainian.info"
    args "-o", "${outputDict}"
}

task createSynthDict(type: JavaExec, dependsOn: prepareDict) {
    def outputDict="${outputDir}/ukrainian_synth.dict"

    inputs.file tasks.prepareDict.outputs.files
    outputs.file outputDict

    workingDir "$projectDir"

    classpath = files(configurations.provided.files)
    main = 'org.languagetool.tools.SynthDictionaryBuilder'

    args "-i", "${tmpDir}/all.tagged.tmp"
    args "-info", "${resourceDir}/ukrainian_synth.info"
    args "-o", "${outputDict}"
}


task prepareSpellWords(type: Exec, dependsOn: processResources) {
    def srcDict="${inputDir}/words_spell.txt"
    def outFile="${tmpDir}/all.words.tmp"

    inputs.file srcDict
    outputs.file outFile

    workingDir "$projectDir"

    doFirst {
        new File(tmpDir).mkdirs()
    }

    def cmd = "cat ${srcDict} | iconv -f ${srcEncoding} -t ${dstEncoding} | LC_ALL=POSIX sort -u > ${outFile}"

    commandLine "sh", "-c", "${cmd}"
}

task createSpellDict(type: JavaExec, dependsOn: prepareSpellWords) {
    def spellOutDir="${outputDir}/hunspell"
    def outFile="${spellOutDir}/uk_UA.dict"
    def freqFile="src/main/data/uk_wordlist.xml"

    inputs.file tasks.prepareSpellWords.outputs.files
    outputs.file outFile

    workingDir "$projectDir"

    classpath = files(configurations.provided.files)
    main = 'org.languagetool.tools.SpellDictionaryBuilder'

    args "-i", "${tmpDir}/all.words.tmp"
    args "-info", "${resourceDir}/hunspell/uk_UA.info"
    args "-o", "${outFile}"
    args "-freq", "${freqFile}"
}


task copyDictFiles(type: Copy, dependsOn: classes) {
    from outputDir
    into "${languagetoolDictDestDir}"

    includeEmptyDirs = false

//    with dataContent
}



jar {
    manifest {
        attributes 'Implementation-Title': 'Ukrainian dictionary for LanguageTool',
                   'Implementation-Version': version
    }
}

classes.dependsOn(createPOSDict, createSynthDict, createTagList, createSpellDict)
compileJava.enabled = false


publishing {
    repositories {
        mavenLocal()
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
